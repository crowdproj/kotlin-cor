# This is a basic workflow to help you get started with Actions

name: 'CI-publish'

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  release:
    types: [ created ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  publish:
#    runs-on: ubuntu-latest
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Decode
        run: |
          mkdir -p ~/.gradle
          echo "${{secrets.OSSRH_SIGNING_SECRET_KEY_RING_FILE}}" > ~/.gradle/secring.gpg.b64
          base64 -d ~/.gradle/secring.gpg.b64 > ~/.gradle/secring.gpg

#      - name: Run Tests
#        uses: gradle/gradle-build-action@v2
#        env:
#          NEXUS_HOST: ${{ secrets.OSSRH_HOST }}
#          NEXUS_USER: ${{ secrets.OSSRH_USER }}
#          NEXUS_PASS: ${{ secrets.OSSRH_PASS }}
#        #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          arguments: --stacktrace deploy -Psigning.keyId=${{secrets.OSSRH_SIGNING_KEY_ID}} -Psigning.password='${{secrets.OSSRH_GPG_SECRET_KEY_PASSWORD}}' -Psigning.secretKeyRingFile=$(echo ~/.gradle/secring.gpg)
      - name: Publish package
        run: ./gradlew --stacktrace deploy -Psigning.keyId=${{secrets.OSSRH_SIGNING_KEY_ID}} -Psigning.password='${{secrets.OSSRH_GPG_SECRET_KEY_PASSWORD}}' -Psigning.secretKeyRingFile=$(echo ~/.gradle/secring.gpg)
        env:
          NEXUS_HOST: ${{ secrets.OSSRH_HOST }}
          NEXUS_USER: ${{ secrets.OSSRH_USER }}
          NEXUS_PASS: ${{ secrets.OSSRH_PASS }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Report unit tests
#        uses: dorny/test-reporter@v1
#        if: always()
#        with:
#          name: Gradle Tests
#          path: '**/build/test-results/*/TEST-*.xml'
#          reporter: java-junit
#          fail-on-error: true
